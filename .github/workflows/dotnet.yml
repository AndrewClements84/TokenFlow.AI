# .NET Build, Test & Publish Workflow
# ----------------------------------
# This workflow builds, tests, and publishes TokenFlow packages.
# - Runs on push/PR to master or main.
# - Publishes to NuGet only when a semantic version tag (vX.Y.Z) is pushed.
# - Includes Codecov reporting and benchmark smoke verification.

name: .NET Build, Test & Publish

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*.*.*'       # Publish only on version tags
  pull_request:
    branches: [ master, main ]

jobs:
  build:
    name: 🧪 Build, Test & Verify
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 💾 Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: 📦 Restore dependencies
        run: dotnet restore TokenFlow.AI.sln

      - name: 🏗️ Build all projects
        run: dotnet build TokenFlow.AI.sln --no-restore --configuration Release

      - name: 🧪 Run all tests (including Tools.Tests)
        run: dotnet test TokenFlow.AI.sln --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"

      # -------------------------------------------------------------------
      # 🧪 Performance Benchmark & Regression Tracking (TokenFlow v0.6.1)
      # -------------------------------------------------------------------
      - name: 🧭 Run Benchmarks
        run: dotnet run -c Release --project src/TokenFlow.Tools.Benchmarks --exporters json --out benchmark-results/

      - name: 🗂️ Prepare latest benchmark output
        run: |
          FILE=$(find benchmark-results -name "*TokenizerBenchmarks-report-full.json" | head -n 1)
          if [ -f "$FILE" ]; then
            cp "$FILE" benchmark-results/latest.json
          else
            echo "❌ Could not find tokenizer benchmark JSON!"
            exit 1
          fi

      - name: 🐍 Setup Python for comparison script
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: 🔍 Compare Benchmark Results
        run: |
          echo "Comparing benchmark-results/latest.json with baseline.json..."
          python3 .github/scripts/compare_benchmarks.py benchmark-results/baseline.json benchmark-results/latest.json
        continue-on-error: false

      - name: 📤 Upload benchmark artifacts
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results/
          if-no-files-found: error
          retention-days: 7

      # -------------------------------------------------------------------

      - name: 🧮 Verify benchmarks compile
        run: dotnet run --project src/TokenFlow.Tools.Benchmarks/TokenFlow.Tools.Benchmarks.csproj -c Release -- --list
        continue-on-error: true

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./tests/**/coverage.cobertura.xml
          flags: unittests
          fail_ci_if_error: true
          verbose: true

      - name: 🟩 Mark build status
        if: success()
        run: echo "✅ Build and tests passed!"

      - name: 🟥 Mark build failed
        if: failure()
        run: echo "❌ Build or tests failed."

  publish:
    name: 🚀 Publish TokenFlow Packages
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Restore dependencies
        run: dotnet restore TokenFlow.AI.sln

      - name: 🏗️ Build in Release mode
        run: dotnet build TokenFlow.AI.sln --configuration Release --no-restore

      # Pack only public libraries
      - name: 📦 Pack TokenFlow.Core
        run: dotnet pack src/TokenFlow.Core/TokenFlow.Core.csproj --configuration Release --no-build -o ./artifacts

      - name: 📦 Pack TokenFlow.AI
        run: dotnet pack src/TokenFlow.AI/TokenFlow.AI.csproj --configuration Release --no-build -o ./artifacts

      # Push to NuGet only for tagged versions
      - name: 🚀 Publish to NuGet (only on tagged release)
        run: dotnet nuget push "./artifacts/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
