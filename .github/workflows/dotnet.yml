# .NET Build, Test & Publish Workflow
# ----------------------------------
# Builds, tests, and publishes TokenFlow packages.
# Includes performance regression tracking and artifact uploads.
# You can toggle benchmarks with the RUN_BENCHMARKS flag below.

name: .NET Build, Test & Publish

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ master, main ]

env:
  RUN_BENCHMARKS: false   # 🔁 Set to 'true' to enable performance benchmarks

jobs:
  build:
    name: 🧪 Build, Test & Verify
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 💾 Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: 📦 Restore dependencies
        run: dotnet restore TokenFlow.AI.sln

      - name: 🏗️ Build all projects
        run: dotnet build TokenFlow.AI.sln --no-restore --configuration Release

      - name: 🧪 Run all tests (including Tools.Tests)
        run: dotnet test TokenFlow.AI.sln --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"

      # -------------------------------------------------------------------
      # 🧪 Performance Benchmark & Regression Tracking (optional)
      # -------------------------------------------------------------------
      - name: 🧩 Ensure benchmark-results directory exists
        if: ${{ env.RUN_BENCHMARKS == 'true' }}
        run: mkdir -p benchmark-results/results

      - name: 🧭 Run Benchmarks
        if: ${{ env.RUN_BENCHMARKS == 'true' }}
        run: dotnet run -c Release --project src/TokenFlow.Tools.Benchmarks

      - name: 🗂️ Prepare latest benchmark output (merge all JSONs)
        if: ${{ env.RUN_BENCHMARKS == 'true' }}
        run: |
          echo "🔍 Searching for BenchmarkDotNet report files..."
          pwd
          ls -R benchmark-results || true

          FILES=$(find benchmark-results -type f -name "*report*.json" | grep -v baseline.json || true)
          if [ -z "$FILES" ]; then
            echo "❌ No benchmark report JSON files found!"
            echo "Directory contents for debugging:"
            find . -maxdepth 5 -type f
            exit 1
          fi

          echo "✅ Found benchmark files:"
          echo "$FILES"

          echo "[" > benchmark-results/latest.json
          FIRST=true
          for FILE in $FILES; do
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              echo "," >> benchmark-results/latest.json
            fi
            cat "$FILE" >> benchmark-results/latest.json
          done
          echo "]" >> benchmark-results/latest.json

          echo "✅ Combined benchmark results written to benchmark-results/latest.json"
          ls -lh benchmark-results/latest.json

      - name: 🐍 Setup Python for comparison script
        if: ${{ env.RUN_BENCHMARKS == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: 🔍 Compare Benchmark Results
        if: ${{ env.RUN_BENCHMARKS == 'true' }}
        run: |
          echo "Comparing benchmark-results/latest.json with baseline.json..."
          python3 .github/scripts/compare_benchmarks.py benchmark-results/baseline.json benchmark-results/latest.json
        continue-on-error: false

      - name: 📤 Upload benchmark artifacts
        if: ${{ env.RUN_BENCHMARKS == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results/
          if-no-files-found: error
          retention-days: 7
      # -------------------------------------------------------------------

      - name: 🧮 Verify benchmarks compile
        run: dotnet run --project src/TokenFlow.Tools.Benchmarks/TokenFlow.Tools.Benchmarks.csproj -c Release -- --list
        continue-on-error: true

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./tests/**/coverage.cobertura.xml
          flags: unittests
          fail_ci_if_error: true
          verbose: true

      - name: 🟩 Mark build status
        if: success()
        run: echo "✅ Build and tests passed!"

      - name: 🟥 Mark build failed
        if: failure()
        run: echo "❌ Build or tests failed."

  publish:
    name: 🚀 Publish TokenFlow Packages
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Restore dependencies
        run: dotnet restore TokenFlow.AI.sln

      - name: 🏗️ Build in Release mode
        run: dotnet build TokenFlow.AI.sln --configuration Release --no-restore

      - name: 📦 Pack TokenFlow.Core
        run: dotnet pack src/TokenFlow.Core/TokenFlow.Core.csproj --configuration Release --no-build -o ./artifacts

      - name: 📦 Pack TokenFlow.AI
        run: dotnet pack src/TokenFlow.AI/TokenFlow.AI.csproj --configuration Release --no-build -o ./artifacts

      - name: 🚀 Publish to NuGet (only on tagged release)
        run: dotnet nuget push "./artifacts/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
