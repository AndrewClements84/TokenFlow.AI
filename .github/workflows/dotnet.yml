name: .NET Build, Test & Publish

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ master, main ]

env:
  RUN_BENCHMARKS: false

jobs:
  build:
    name: 🧪 Build, Test & Verify
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 💾 Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: 📦 Restore dependencies
        run: dotnet restore TokenFlow.AI.sln

      - name: 🏗️ Build all projects
        run: dotnet build TokenFlow.AI.sln --no-restore --configuration Release

      - name: 🧪 Run all tests
        run: dotnet test TokenFlow.AI.sln --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./tests/**/coverage.cobertura.xml
          flags: unittests
          fail_ci_if_error: true
          verbose: true

      - name: 🟩 Mark build status
        if: success()
        run: echo "✅ Build and tests passed!"

      - name: 🟥 Mark build failed
        if: failure()
        run: echo "❌ Build or tests failed."

  publish:
    name: 🚀 Publish TokenFlow Packages
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: ♻️ Clean old artifacts
        run: |
          echo "🧹 Cleaning old artifacts..."
          rm -rf ./artifacts
          mkdir -p ./artifacts

      - name: 📦 Restore dependencies
        run: dotnet restore TokenFlow.AI.sln

      - name: 🏗️ Build in Release mode
        run: dotnet build TokenFlow.AI.sln --configuration Release --no-restore

      # 🧩 Step 1 — Pack TokenFlow.Core
      - name: 📦 Pack TokenFlow.Core
        run: dotnet pack src/TokenFlow.Core/TokenFlow.Core.csproj --configuration Release --no-build -o ./artifacts

      # 🧩 Step 2 — Pack TokenFlow.Tokenizers (standalone)
      - name: 📦 Pack TokenFlow.Tokenizers
        run: dotnet pack src/TokenFlow.Tokenizers/TokenFlow.Tokenizers.csproj --configuration Release --no-build -o ./artifacts

      # 🧩 Step 3 — Pack TokenFlow.AI (depends on Tokenizers)
      - name: 📦 Pack TokenFlow.AI
        run: dotnet pack src/TokenFlow.AI/TokenFlow.AI.csproj --configuration Release -o ./artifacts /p:UsePackageReference=true

      # 📤 Optional: Upload artifacts for inspection
      - name: 📤 Upload built NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts/*.nupkg
          retention-days: 7

      # 🚀 Step 4 — Publish each package separately
      - name: 🚀 Publish to NuGet (only on tagged release)
        run: |
          echo "🚀 Publishing all NuGet packages from ./artifacts..."
          for pkg in ./artifacts/*.nupkg; do
            echo "📦 Publishing $pkg ..."
            dotnet nuget push "$pkg" \
              --api-key "${{ secrets.NUGET_API_KEY }}" \
              --source "https://api.nuget.org/v3/index.json" \
              --skip-duplicate
          done

      - name: ✅ Done
        run: echo "🎉 All TokenFlow packages published successfully!"
