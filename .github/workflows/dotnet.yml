# .NET Build, Test & Publish Workflow
# ----------------------------------
# Builds, tests, and publishes TokenFlow packages.
# Includes code coverage, verification, and artifact uploads.

name: .NET Build, Test & Publish

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ master, main ]

env:
  RUN_BENCHMARKS: false

jobs:
  build:
    name: 🧪 Build, Test & Verify
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 💾 Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: 📦 Restore dependencies
        run: dotnet restore TokenFlow.AI.sln

      - name: 🏗️ Build all projects
        run: dotnet build TokenFlow.AI.sln --no-restore --configuration Release

      - name: 🧪 Run all tests (including Tools.Tests)
        run: dotnet test TokenFlow.AI.sln --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./tests/**/coverage.cobertura.xml
          flags: unittests
          fail_ci_if_error: true
          verbose: true

      - name: 🟩 Mark build status
        if: success()
        run: echo "✅ Build and tests passed!"

      - name: 🟥 Mark build failed
        if: failure()
        run: echo "❌ Build or tests failed."

  publish:
    name: 🚀 Publish TokenFlow Packages
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: ♻️ Clean old artifacts
        run: |
          echo "🧹 Cleaning old artifacts..."
          rm -rf ./artifacts
          mkdir -p ./artifacts

      - name: 📦 Restore dependencies
        run: dotnet restore TokenFlow.AI.sln

      - name: 🏗️ Build in Release mode
        run: dotnet build TokenFlow.AI.sln --configuration Release --no-restore

      - name: 📦 Pack TokenFlow.Core
        run: dotnet pack src/TokenFlow.Core/TokenFlow.Core.csproj --configuration Release --no-build -o ./artifacts

      - name: 📦 Pack TokenFlow.AI (with embedded Tokenizers)
        run: dotnet pack src/TokenFlow.AI/TokenFlow.AI.csproj --configuration Release -o ./artifacts

      # ✅ NEW STEP: Verify contents before publishing
      - name: 🔍 Verify TokenFlow.AI.nupkg contents
        run: |
          echo "🧩 Checking contents of generated TokenFlow.AI package..."
          for pkg in ./artifacts/TokenFlow.AI.*.nupkg; do
            echo "Inspecting $pkg"
            unzip -l "$pkg" | tee package_contents.txt
            if ! grep -q "TokenFlow.AI.dll" package_contents.txt; then
              echo "❌ ERROR: TokenFlow.AI.dll missing from $pkg"
              exit 1
            fi
            if ! grep -q "TokenFlow.Tokenizers.dll" package_contents.txt; then
              echo "❌ ERROR: TokenFlow.Tokenizers.dll missing from $pkg"
              exit 1
            fi
            echo "✅ Verified $pkg contains both DLLs."
          done

      # ✅ NEW STEP: Upload verified .nupkg files for inspection
      - name: 📤 Upload verified NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: verified-nuget-packages
          path: ./artifacts/*.nupkg
          retention-days: 7

      - name: 🚀 Publish to NuGet (only on tagged release)
        run: dotnet nuget push "./artifacts/*.nupkg" \
               --api-key ${{ secrets.NUGET_API_KEY }} \
               --source https://api.nuget.org/v3/index.json \
               --skip-duplicate
